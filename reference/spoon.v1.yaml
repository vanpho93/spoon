openapi: 3.0.0
info:
  title: spoon
  version: '1.0'
  description: ''
servers:
  - url: 'https://xspoon.herokuapp.com'
paths:
  /user/login:
    post:
      summary: Login
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    $ref: '#/components/schemas/User'
              examples:
                SUCCESS:
                  value:
                    success: true
                    result:
                      userId: 2
                      email: vanho02@gmail.com
                      name: Brian Nguyen
                      created: '2020-04-20T11:53:38.619Z'
                      modified: '2020-04-20T11:53:38.619Z'
                      accountType: LISTENER
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjIsImFjY291bnRUeXBlIjoiTElTVEVORVIiLCJpYXQiOjE1ODczODkyOTksImV4cCI6MTU4ODI1MzI5OX0.fsdSqOXdDYAqexlWusJzClY9Q0B7aQInuLk-p_0Hltg
                ERROR:
                  value:
                    success: false
                    message: INVALID_PASSWORD
            application/xml:
              schema:
                type: object
                properties: {}
              examples:
                example-1: {}
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - CANNOT_FIND_EMAIL
                      - INVALID_PASSWORD
      operationId: post-user-login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
  /user/register:
    post:
      summary: Register
      operationId: post-user-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
                password:
                  type: string
                accountType:
                  type: string
                  enum:
                    - LISTENER
                    - DJ
              required:
                - email
                - name
                - password
                - accountType
            examples:
              example:
                value:
                  email: vanho02@gmail.com
                  password: '12345678'
                  name: Brian Nguyen
                  accountType: LISTENER
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    $ref: '#/components/schemas/User'
                required:
                  - success
                  - result
              examples:
                example:
                  value:
                    success: true
                    result:
                      userId: 4
                      email: vanho05@gmail.com
                      name: Brian Nguyen
                      created: '2020-04-20T14:23:14.055Z'
                      modified: '2020-04-20T14:23:14.055Z'
                      accountType: LISTENER
                      token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQsImFjY291bnRUeXBlIjoiTElTVEVORVIiLCJpYXQiOjE1ODczOTI1OTQsImV4cCI6MTU4ODI1NjU5NH0.Xaj8NGiZQgNSGqTUfuHy9u7qklWBomLi3Lwk89FKzAw
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    enum:
                      - 'false'
                  message:
                    type: string
                    enum:
                      - EMAIL_EXISTED
                      - PASSWORD_MUST_BE_LONGER_THAN_8
                required:
                  - success
                  - message
  /following-relationship/follow:
    post:
      summary: Follow
      operationId: post-following-relationship-follow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - CANNOT_FIND_DJ
                      - ALREADY_FOLLOWED
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                djId:
                  type: integer
            examples:
              example:
                value:
                  djId: 1
      security:
        - token: []
  /following-relationship/unfollow:
    post:
      summary: Unfollow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - NOT_FOLLOWED
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                djId:
                  type: integer
            examples:
              example:
                value:
                  djId: 1
      operationId: post-following-relationship-unfollow
  /block-relationship/block:
    post:
      summary: Block
      operationId: post-block-relationship-block
      security:
        - token: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
            examples:
              example:
                value:
                  userId: 1
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
              examples:
                example:
                  value:
                    success: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - ALREADY_BLOCKED
                      - CANNOT_FIND_USER
                      - MUST_BE_USER
              examples:
                example:
                  value:
                    success: false
                    message: ALREADY_BLOCKED
  /block-relationship/unblock:
    post:
      summary: Unblock
      operationId: post-block-relationship-unblock
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
              examples:
                example:
                  value:
                    success: true
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - NOT_BLOCKED
                      - MUST_BE_USER
              examples:
                example:
                  value:
                    success: false
                    message: NOT_BLOCKED
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
            examples:
              example:
                value:
                  userId: 1
      security:
        - token: []
  /user:
    get:
      summary: Get list users
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUserInfo'
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      - userId: 1
                        email: vanho01@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
                      - userId: 2
                        email: vanho02@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
                      - userId: 3
                        email: vanho04@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
      operationId: get-user
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example-1:
                value:
                  success: true
                  result:
                    - userId: 1
                      email: vanho01@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
                    - userId: 2
                      email: vanho02@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
                    - userId: 3
                      email: vanho04@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
      parameters:
        - schema:
            type: number
          in: query
          name: pageSize
          required: true
        - schema:
            type: number
          in: query
          name: page
          required: true
      description: Get all user
  '/listener/:listenerId':
    get:
      summary: Get listener by id
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    $ref: '#/components/schemas/Listener'
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      userId: 2
                      email: vanho02@gmail.com
                      name: Brian Nguyen
                      created: '2020-04-20T11:53:38.624Z'
                      modified: '2020-04-20T11:53:38.624Z'
                      followedCount: 0
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - CANNOT_FIND_LISTENER
                      - MUST_BE_USER
              examples:
                example:
                  value:
                    success: false
                    message: MUST_BE_USER
      operationId: 'get-listener-:listenerId'
      requestBody: {}
      description: ''
      parameters:
        - schema:
            type: string
          in: header
          name: token
          required: true
      security:
        - token: []
  '/dj/:djId':
    get:
      operationId: 'get-dj-:djId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    $ref: '#/components/schemas/Dj'
              examples:
                example:
                  value:
                    success: true
                    result:
                      userId: 5
                      email: vanho06@gmail.com
                      name: Brian Nguyen
                      created: '2020-04-20T15:02:38.756Z'
                      modified: '2020-04-20T15:02:38.756Z'
                      followerCount: 0
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - MUST_BE_USER
                      - CANNOT_FIND_DJ
              examples:
                example:
                  value:
                    success: false
                    message: MUST_BE_USER
      tags: []
      summary: Get dj by id
      security:
        - token: []
  /follower:
    get:
      summary: Get followers for DJ
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  result:
                    type: array
                    items:
                      $ref: '#/components/schemas/PublicUserInfo'
              examples:
                example-1:
                  value:
                    success: true
                    result:
                      - userId: 1
                        email: vanho01@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
                      - userId: 2
                        email: vanho02@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
                      - userId: 3
                        email: vanho04@gmail.com
                        name: Brian Nguyen
                        accountType: LISTENER
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    enum:
                      - MUST_BE_DJ
      operationId: get-follower
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example-1:
                value:
                  success: true
                  result:
                    - userId: 1
                      email: vanho01@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
                    - userId: 2
                      email: vanho02@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
                    - userId: 3
                      email: vanho04@gmail.com
                      name: Brian Nguyen
                      accountType: LISTENER
      parameters:
        - schema:
            type: number
          in: query
          name: pageSize
          required: true
        - schema:
            type: number
          in: query
          name: page
          required: true
components:
  schemas:
    User:
      title: User
      type: object
      properties:
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        accountType:
          type: string
        token:
          type: string
        created:
          type: string
        modified:
          type: string
      x-examples:
        example-1: {}
    Dj:
      title: Dj
      type: object
      properties:
        userId:
          type: number
        email:
          type: string
        name:
          type: string
        followerCount:
          type: integer
        created:
          type: string
        modified:
          type: string
    Listener:
      title: Listener
      type: object
      properties:
        userId:
          type: number
        email:
          type: string
        name:
          type: string
        followedCount:
          type: number
        created:
          type: string
        modified:
          type: string
    PublicUserInfo:
      title: PublicUserInfo
      type: object
      properties:
        userId:
          type: integer
        email:
          type: string
        name:
          type: string
        accountType:
          type: string
  securitySchemes:
    token:
      type: http
      scheme: basic
